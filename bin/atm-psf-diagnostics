#!/usr/bin/env python


def main(flist, outfile, nbin, frac, airmass_max, bys2n=False, s2n_nbin=5):
    import atm_psf
    import esutil as eu

    data = atm_psf.io.load_sources_many(flist, airmass_max=airmass_max)
    if bys2n:
        fig, axs = atm_psf.diagnostics.plot_star_stats_bys2n(
            data, nbin=s2n_nbin, frac=frac,
        )
    else:
        fig, axs = atm_psf.diagnostics.plot_star_stats(
            data, nbin=nbin, frac=frac,
        )

    print('writing:', outfile)
    eu.ostools.makedirs_fromfile(outfile)
    fig.savefig(outfile, dpi=150)


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', nargs='+', required=True)
    parser.add_argument('-o', '--output', required=True)
    parser.add_argument('--nbin', default=30, type=int)
    parser.add_argument('--airmass-max', type=float)
    parser.add_argument(
        '--frac',
        type=float,
        help='use this fraction of objects in scatter plots'
    )
    parser.add_argument('--bys2n', action='store_true',
                        help='plot stats as a function of S/N')
    parser.add_argument('--s2n-nbin', default=5, type=int)
    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()
    main(
        flist=args.input, outfile=args.output, nbin=args.nbin, frac=args.frac,
        airmass_max=args.airmass_max,
        bys2n=args.bys2n,
        s2n_nbin=args.s2n_nbin,
    )
