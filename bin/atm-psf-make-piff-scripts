#!/usr/bin/env python

SCRIPT = r"""#!/usr/bin/bash
# make sure to source ~/imsim-setup/imsim-setup.sh first
seed=$1
image=$2
truth=$3
piff=$4
sources=$5

atm-psf-run-piff \
        --seed $seed \
        --image $image \
        --truth $truth \
        --piff $piff \
        --sources $sources
"""

CONDOR_HEAD = r"""
Universe = vanilla

Notification = Never

# Run this exe with these args
Executable = run.sh

request_memory = 2G

GetEnv = True

kill_sig = SIGINT

+Experiment = "astro"

"""

JOB_TEMPLATE = r"""
+job_name = "%(job_name)s"
arguments = %(seed)d %(image)s %(truth)s %(piff)s %(sources)s
Queue
"""


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('config')
    parser.add_argument('--skip-existing', action='store_true')
    return parser.parse_args()


def load_config(fname):
    import yaml
    with open(fname) as fobj:
        data = yaml.safe_load(fobj)
    return data


def write_script(run_dir):
    import os

    outfile = f'{run_dir}/run.sh'
    print('writing:', outfile)

    with open(outfile, 'w') as fobj:
        fobj.write(SCRIPT)
    os.system(f'chmod 755 {outfile}')


def makedir(d):
    import os
    if not os.path.exists(d):
        print('making dir:', d)
        os.makedirs(d)


def write_condor_head(condorf, config):
    condorf.write(CONDOR_HEAD)


def get_file_data(directory):
    import os

    flist = []
    for root, dirs, files in os.walk(directory, topdown=False):
        for basename in files:
            if 'eimage' in basename:
                fname = os.path.join(root, basename)
                fname = os.path.abspath(fname)
                flist.append(fname)

    flist.sort()

    dlist = []
    for image_fname in flist:
        truth_fname = image_fname.replace('eimage-', 'truth-')
        assert truth_fname != image_fname
        if not os.path.exists(truth_fname):
            raise RuntimeError(f'{truth_fname} not found')

        obsid = os.path.basename(os.path.dirname(image_fname))
        d = {'image': image_fname, 'truth': truth_fname, 'obsid': obsid}
        dlist.append(d)

    return dlist


def main():
    import os
    import numpy as np

    args = get_args()

    config = load_config(args.config)
    rng = np.random.default_rng(config['seed'])

    dlist = get_file_data(config['sim_dir'])
    print('found:', len(dlist), 'eimage files')

    run_dir = os.path.join(config['base_dir'], config['run'])
    makedir(run_dir)

    write_script(run_dir)
    condor_file = os.path.join(run_dir, 'submit.condor')
    print('opening:', condor_file)
    with open(condor_file, 'w') as condorf:

        for i, data in enumerate(dlist):
            write_condor_head(condorf, config)

            outdir = os.path.join(run_dir, data['obsid'])

            bname = os.path.basename(data['image'])
            piff_name = bname.replace(
                '.fits', '.pkl'
            ).replace(
                'eimage', 'piff'
            )
            assert piff_name != bname
            sources_name = piff_name.replace('piff', 'sources')
            assert sources_name != piff_name

            piff_file = os.path.join(outdir, piff_name)
            if args.skip_existing and os.path.exists(piff_file):
                print('skipping existing:', piff_file)
                continue

            ipad = '%05d' % i

            # use relative dir so directory is relocatable
            piff_file_local = os.path.join(
                data['obsid'], os.path.basename(piff_name),
            )
            sources_file_local = os.path.join(
                data['obsid'], os.path.basename(sources_name),
            )

            job_name = f'{config["run"]}-{ipad}'
            jobtext = JOB_TEMPLATE % {
                'job_name': job_name,
                'seed': rng.integers(0, 2**20),
                'image': data['image'],
                'truth': data['truth'],
                'piff': piff_file_local,
                'sources': sources_file_local,
            }
            condorf.write(jobtext)


if __name__ == '__main__':
    main()
