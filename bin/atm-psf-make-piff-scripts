#!/usr/bin/env python

SCRIPT = r"""#!/usr/bin/bash
# make sure to source ~/imsim-setup/imsim-setup.sh first
seed=$1
image=$2
piff=$3
sources=$4

export OMP_NUM_THREADS=1

atm-psf-run-piff \
    --seed $seed \
    --image $image \
    --piff $piff \
    --sources $sources
"""

CONDOR_HEAD = r"""
Universe = vanilla

Notification = Never

# Run this exe with these args
Executable = run-piff.sh

request_memory = 2G

GetEnv = True

kill_sig = SIGINT

+Experiment = "astro"

"""

JOB_TEMPLATE = r"""
+job_name = "%(job_name)s"
arguments = %(seed)d %(image)s %(piff)s %(sources)s
Queue
"""


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--simdir', required=True)
    parser.add_argument('--outdir', required=True)
    parser.add_argument('--nper', type=int, default=1000,
                        help='number of jobs per condor file')
    parser.add_argument('--skip-existing', action='store_true')
    return parser.parse_args()


def write_script(run_dir):
    import os

    outfile = f'{run_dir}/run-piff.sh'
    print('writing:', outfile)

    with open(outfile, 'w') as fobj:
        fobj.write(SCRIPT)

    os.system(f'chmod 755 {outfile}')


def makedir(d):
    import os
    if not os.path.exists(d):
        print('making dir:', d)
        os.makedirs(d)


def write_condor_head(condorf):
    condorf.write(CONDOR_HEAD)


def get_file_data(directory):
    import random
    import os

    flist = []
    for root, dirs, files in os.walk(directory, topdown=False):
        for basename in files:
            if 'simdata' in basename:
                fname = os.path.join(root, basename)
                fname = os.path.abspath(fname)
                flist.append(fname)

    flist.sort()

    dlist = []
    for image_fname in flist:
        obsid = os.path.basename(os.path.dirname(image_fname))
        d = {'image': image_fname, 'obsid': obsid}
        dlist.append(d)

    # shuffle so not writing into same directory all the time
    random.shuffle(dlist)
    return dlist


def main():
    import os

    args = get_args()

    dlist = get_file_data(args.simdir)
    print('found:', len(dlist), 'simdata files')

    makedir(args.outdir)

    write_script(args.outdir)

    icondor = 0
    condorf = None
    this_njobs = 0

    for i, data in enumerate(dlist):

        if condorf is None or this_njobs == args.nper:
            if condorf is not None:
                condorf.close()

            condor_file = os.path.join(
                args.outdir, f'submit-piff{icondor:04d}.condor'
            )
            print('opening:', condor_file)
            condorf = open(condor_file, 'w')

            write_condor_head(condorf)
            icondor += 1
            this_njobs = 0

        bname = os.path.basename(data['image'])

        sources_name = bname.replace('simdata', 'sources')
        piff_name = bname.replace(
            'simdata', 'piff'
        ).replace(
            '.fits', '.pkl',
        )
        assert sources_name != bname

        sources_file_local = os.path.join(
            data['obsid'],
            sources_name,
        )
        piff_file_local = os.path.join(
            data['obsid'],
            piff_name,
        )

        sources_file = os.path.join(
            args.outdir,
            sources_file_local,
        )

        if args.skip_existing and os.path.exists(sources_file):
            print('skipping existing:', sources_file)
            continue

        job_name = sources_name.replace(
            '.fits', ''
        ).replace(
            'sources-', ''
        )

        jobtext = JOB_TEMPLATE % {
            'job_name': job_name,
            'seed': get_seed(data['image']),
            'image': data['image'],
            'piff': piff_file_local,
            'sources': sources_file_local,
        }
        condorf.write(jobtext)
        this_njobs += 1


def get_seed(fname):
    import hashlib
    h = hashlib.sha1(fname.encode("utf-8")).hexdigest()
    return int(h, 16) % 2**30


if __name__ == '__main__':
    main()
