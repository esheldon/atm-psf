#!/usr/bin/env python

import numpy as np
import atm_psf


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--run-config', required=True)
    parser.add_argument('--sim-config', required=True)
    parser.add_argument('--opsim-db', required=True)
    parser.add_argument('--obsid', type=int, required=True)
    parser.add_argument('--instcat', required=True)
    parser.add_argument('--nccds', type=int,
                        help='simulate this many random ccds')
    parser.add_argument('--ccds', help='e.g. "35 66"')
    parser.add_argument('--seed', type=int, required=True)
    parser.add_argument('--nocleanup', action='store_true')
    parser.add_argument('--show', action='store_true')
    parser.add_argument(
        '--use-existing',
        action='store_true',
        help='Re-use instcat if it already exists',
    )
    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()

    if args.nccds is None and args.ccds is None:
        raise RuntimeError('send either ccds or nccds')

    rng = np.random.default_rng(args.seed)

    if args.ccds is not None:
        ccds = args.ccds
    else:
        ccds = rng.choice(189, size=args.nccds, replace=False)

    run_config = atm_psf.io.load_yaml(args.run_config)
    sim_config = atm_psf.config.load_sim_config(args.sim_config)
    cleanup = not args.nocleanup

    atm_psf.process.run_sim_and_piff(
        run_config=run_config,
        sim_config=sim_config,
        opsim_db=args.opsim_db,
        obsid=args.obsid,
        instcat=args.instcat,
        ccds=ccds,
        seed=args.seed,
        cleanup=cleanup,
        show=args.show,
        use_existing=args.use_existing,
    )
