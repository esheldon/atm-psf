#!/usr/bin/env python


def get_args():
    import argparse
    parser = argparse.ArgumentParser()

    parser.add_argument('--instcat', required=True)
    parser.add_argument('--seed', type=int, required=True)
    parser.add_argument('--run-config', required=True)
    parser.add_argument('--sim-config', help='optional sim config')
    parser.add_argument('--nocorners', action='store_true',
                        help='do not use corner CCDS')
    parser.add_argument('--nccds', type=int,
                        help='simulate this many random ccds')
    parser.add_argument('--ccds', type=int, nargs='+',
                        help='simulate these ccds, e.g. "35 66"')
    parser.add_argument('--outdir', required=True)

    parser.add_argument(
        '--use-existing',
        action='store_true',
        help='Re-use instcat if it already exists',
    )

    parser.add_argument('--nocleanup', action='store_true',
                        help='do not remove the simulated file')
    parser.add_argument('--plot-dir')
    return parser.parse_args()


def go(args):
    import numpy as np
    import atm_psf
    from atm_psf.ccds import get_random_ccdnums, get_ccdnums_nocorners

    if args.nccds is None and args.ccds is None and not args.nocorners:
        raise RuntimeError('send either ccds or nccds or --nocorners')

    atm_psf.io.makedir(args.outdir)

    rng = np.random.default_rng(args.seed)

    if args.ccds is not None:
        ccds = args.ccds
    elif args.nocorners:
        ccds = get_ccdnums_nocorners()
    else:
        ccds = get_random_ccdnums(rng, size=args.nccds)

    run_config = atm_psf.io.load_yaml(args.run_config)
    sim_config = atm_psf.config.load_sim_config(args.sim_config)
    cleanup = not args.nocleanup

    atm_psf.process.run_sim_and_piff(
        rng=rng,
        run_config=run_config,
        sim_config=sim_config,
        instcat=args.instcat,
        ccds=ccds,
        outdir=args.outdir,
        cleanup=cleanup,
        use_existing=args.use_existing,
        plot_dir=args.plot_dir,
    )


def main():
    args_ = get_args()
    go(args_)


main()
