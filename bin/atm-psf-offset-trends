#!/usr/bin/env python


def plot_one_cens(cens):
    import matplotlib.pyplot as mplt
    nbin = 10
    alpha = 0.5
    fig, ax = mplt.subplots()
    ax.set(xlabel='shift [pixels]')
    ax.hist(cens[:, 0], bins=nbin, alpha=alpha, label='u')
    ax.hist(cens[:, 1], bins=nbin, alpha=alpha, label='v')
    ax.legend()
    mplt.show()


def load_data(flist):
    import atm_psf
    import numpy as np
    from tqdm import tqdm
    import esutil as eu

    dtype = [
        ('airmass', 'f8'),
        ('alt', 'f8'),
        ('az', 'f8'),
        ('ra', 'f8'),
        ('dec', 'f8'),
        ('s2n', 'f8'),
        ('off', 'f8'),
        ('uoff', 'f8'),
        ('voff', 'f8'),
        ('altoff', 'f8'),
        ('azoff', 'f8'),
    ]

    stlist = []
    for f in tqdm(flist):

        # sfile = f.replace('piff-', 'sources-')
        sfile = f.replace('piff-', 'source-')
        sdata = atm_psf.io.load_source_data(sfile)
        if 'reserved' in sdata and sdata['airmass'] >= 1:

            sources = sdata['sources']
            sc, = np.where(
                sdata['star_select']
                & ~sdata['reserved']
            )

            p = atm_psf.io.load_stack_piff(f)
            stars = [
                s for s in p.piffResult.stars
                if not s.is_reserve and not s.is_flagged
            ]

            assert sc.size == len(stars)

            alt = sdata['instcat_meta']['altitude']
            az = sdata['instcat_meta']['azimuth']

            for stari, sourcei in enumerate(sc):

                psf_flux = sources['base_PsfFlux_instFlux'][sourcei]
                psf_flux_err = sources['base_PsfFlux_instFluxErr'][sourcei]

                if psf_flux_err > 0:
                    st = np.zeros(1, dtype=dtype)
                    # print(stari, sourcei)
                    try:
                        cen = stars[stari].center
                    except IndexError:
                        print(stari, sourcei)
                        import IPython
                        IPython.embed()

                    st['airmass'] = sdata['airmass']
                    st['alt'] = alt
                    st['az'] = az
                    st['ra'] = sources['coord_ra'][sourcei]
                    st['dec'] = sources['coord_dec'][sourcei]

                    st['s2n'] = psf_flux / psf_flux_err

                    st['off'] = np.sqrt(cen[0]**2 + cen[1]**2)
                    st['uoff'] = cen[0]
                    st['voff'] = cen[1]
                    st['altoff'], st['azoff'] = project_one_uv_onto_altaz(  # noqa
                        alt=alt, az=az, du=cen[0], dv=cen[1],
                    )

                    stlist.append(st)

    return eu.numpy_util.combine_arrlist(stlist)


def plot_trend(st, xfield='s2n'):
    import matplotlib.pyplot as mplt
    import esutil as eu
    import numpy as np

    nbin = 40
    nperbin = int(st.size / nbin)
    xbs = eu.stat.Binner(st[xfield])
    xbs.dohist(nperbin=nperbin, calc_stats=True, rev=True)

    dtype = [
        (xfield, 'f8'),

        ('off', 'f8'),
        ('off_err', 'f8'),

        ('uoff', 'f8'),
        ('uoff_err', 'f8'),

        ('voff', 'f8'),
        ('voff_err', 'f8'),
    ]
    stats = np.zeros(
        nbin,
        dtype=dtype,
    )
    rev = xbs['rev']
    for i in range(nbin):
        if rev[i] != rev[i+1]:
            w = rev[rev[i]:rev[i+1]]

            stats[xfield][i] = st[xfield][w].mean()

            stats['off'][i], _, stats['off_err'][i] = (
                eu.stat.sigma_clip(st['off'][w], get_err=True)
            )
            stats['uoff'][i], _, stats['uoff_err'][i] = (
                eu.stat.sigma_clip(st['uoff'][w], get_err=True)
            )
            stats['voff'][i], _, stats['voff_err'][i] = (
                eu.stat.sigma_clip(st['voff'][w], get_err=True)
            )

    fig, ax = mplt.subplots()

    if xfield == 's2n':
        xlabel = 'S/N'
    else:
        xlabel = xfield
    ax.set(
        xlabel=xlabel,
        ylabel='offset [arcsec]',
        xlim=[0.5*stats[xfield].min(), 1.5*stats[xfield].max()],
    )
    if xfield == 's2n':
        ax.set_xscale('log')

    ax.errorbar(
        stats[xfield],
        stats['uoff'],
        stats['uoff_err'],
        label='u',
    )
    ax.errorbar(
        stats[xfield],
        stats['voff'],
        stats['voff_err'],
        label='v',
    )
    ax.axhline(0, color='black')
    ax.legend()
    # ax.errorbar(
    #     stats[xfield],
    #     stats['off'],
    #     stats['voff_err'],
    #     label=r'$\sqrt{u^2 + v^2}$',
    # )

    fname = f'offsets-vs-{xfield}.pdf'
    print('writing:', fname)
    mplt.savefig(fname)
    mplt.savefig(fname.replace('.pdf', '.png'), dpi=150)


def group_by_id(flist):
    import os

    data = {}
    for f in flist:
        fp = os.path.basename(f).split('-')
        fid = int(fp[1])
        if fid in data:
            data[fid].append(f)
        else:
            data[fid] = [f]
    return data


def load_data_bypointing(flist, ploteach=False):
    import atm_psf
    import numpy as np
    import random
    from tqdm import tqdm
    import esutil as eu

    dtype = [
        ('airmass', 'f8'),
        ('alt', 'f8'),
        ('dec', 'f8'),

        ('off', 'f8'),
        ('off_std', 'f8'),
        ('uoff', 'f8'),
        ('uoff_std', 'f8'),
        ('voff', 'f8'),
        ('voff_std', 'f8'),

        ('altoff', 'f8'),
        ('azoff', 'f8'),
    ]

    group_data = group_by_id(flist)

    stlist = []
    for fid, plist in tqdm(group_data.items()):

        random.shuffle(plist)
        # f = plist[0]
        # for f in plist[0:0]:

        for f in plist:

            # sfile = f.replace('piff-', 'sources-')
            sfile = f.replace('piff-', 'source-')
            sdata = atm_psf.io.load_source_data(sfile)
            if 'reserved' in sdata and sdata['airmass'] >= 1:

                st = np.zeros(1, dtype=dtype)
                p = atm_psf.io.load_stack_piff(f)
                # these are really offsets in u, v
                cens = np.array([
                    s.center for s in p.piffResult.stars
                    if not s.is_reserve and not s.is_flagged
                ])

                alt = sdata['instcat_meta']['altitude']
                az = sdata['instcat_meta']['azimuth']

                st['airmass'] = sdata['airmass']
                st['alt'] = alt

                sc = sdata['star_select']
                st['dec'] = np.median(sdata['sources']['coord_dec'][sc])
                off = np.sqrt(
                    cens[:, 0]**2 + cens[:, 1]**2
                )

                st['off'], st['off_std'] = eu.stat.sigma_clip(off)
                st['uoff'], st['uoff_std'] = eu.stat.sigma_clip(cens[:, 0])
                st['voff'], st['voff_std'] = eu.stat.sigma_clip(cens[:, 1])

                dalt, daz = project_uv_onto_altaz(
                    alt=alt, az=az, du=cens[:, 0], dv=cens[:, 1],
                )
                st['altoff'], _ = eu.stat.sigma_clip(dalt)
                st['azoff'], _ = eu.stat.sigma_clip(daz)

                # st['off'] = off.mean()
                # st['off_std'] = off.std()
                # st['uoff'] = cens[:, 0].mean()
                # st['uoff_std'] = cens[:, 0].std()
                # st['voff'] = cens[:, 1].mean()
                # st['voff_std'] = cens[:, 1].std()

                stlist.append(st)

                if ploteach:
                    plot_one_cens(cens)

    return eu.numpy_util.combine_arrlist(stlist)


def project_uv_onto_altaz(alt, az, du, dv):
    import numpy as np

    dalt = np.zeros(du.size)
    daz = np.zeros(dv.size)

    for i in range(dalt.size):
        dalt[i], daz[i] = project_one_uv_onto_altaz(
            alt=alt, az=az, du=du[i], dv=dv[i],
        )
    return dalt, daz


def project_one_uv_onto_altaz(alt, az, du, dv):

    q = get_rubin_parallactic_angle(alt, az)

    sinq, cosq = q.sincos()

    dalt = sinq * du + cosq * dv
    daz = cosq * du - sinq * dv

    return dalt, daz


def get_rubin_parallactic_angle(alt, az):
    from galsim import degrees, CelestialCoord

    zenith = CelestialCoord(0.0 * degrees, 90 * degrees)
    ncp = CelestialCoord(0.0 * degrees, -30 * degrees)  # below the horizon

    coord = CelestialCoord(az * degrees, alt * degrees)
    return coord.angleBetween(ncp, zenith)


def plot_trend_bypointing(st, xfield='airmass'):
    import matplotlib.pyplot as mplt
    import esutil as eu
    import numpy as np

    nbin = 20
    nperbin = int(st.size / nbin)
    xbs = eu.stat.Binner(st[xfield])
    xbs.dohist(nperbin=nperbin, calc_stats=True, rev=True)

    dtype = [
        (xfield, 'f8'),

        ('off', 'f8'),
        ('off_err', 'f8'),

        ('uoff', 'f8'),
        ('uoff_err', 'f8'),
        ('uoff_std', 'f8'),
        ('uoff_std_err', 'f8'),

        ('voff', 'f8'),
        ('voff_err', 'f8'),
        ('voff_std', 'f8'),
        ('voff_std_err', 'f8'),

        ('altoff', 'f8'),
        ('altoff_err', 'f8'),
        ('azoff', 'f8'),
        ('azoff_err', 'f8'),
    ]
    stats = np.zeros(
        nbin,
        dtype=dtype,
    )
    rev = xbs['rev']
    for i in range(nbin):
        if rev[i] != rev[i+1]:
            w = rev[rev[i]:rev[i+1]]

            stats[xfield][i] = st[xfield][w].mean()

            if True:
                for front in ['u', 'v', 'alt', 'az']:
                    n = f'{front}off'
                    en = f'{front}off_err'
                    stats[n][i], _, stats[en][i] = eu.stat.sigma_clip(
                        st[n][w], get_err=True,
                    )
            else:
                stats['off'][i] = st['off'][w].mean()
                stats['off_err'][i] = st['off'][w].std() / np.sqrt(nbin)

                stats['uoff'][i] = st['uoff'][w].mean()
                stats['uoff_err'][i] = st['uoff'][w].std() / np.sqrt(nbin)
                stats['uoff_std'][i] = st['uoff_std'][w].mean()
                stats['uoff_std_err'][i] = (
                    st['uoff_std'][w].std() / np.sqrt(nbin)
                )

                stats['voff'][i] = st['voff'][w].mean()
                stats['voff_err'][i] = st['voff'][w].std() / np.sqrt(nbin)
                stats['voff_std'][i] = st['voff_std'][w].mean()
                stats['voff_std_err'][i] = (
                    st['voff_std'][w].std() / np.sqrt(nbin)
                )

                stats['altoff'][i] = st['altoff'][w].mean()
                stats['altoff_err'][i] = st['altoff'][w].std() / np.sqrt(nbin)
                stats['azoff'][i] = st['azoff'][w].mean()
                stats['azoff_err'][i] = st['azoff'][w].std() / np.sqrt(nbin)

    # import IPython; IPython.embed()

    # fig, axs = mplt.subplots(nrows=2, figsize=(6, 6))
    fig, ax = mplt.subplots()

    if xfield == 'alt':
        xlabel = 'altitude'
    else:
        xlabel = xfield

    ax.set(
        xlabel=xlabel,
        ylabel='offset [arcsec]',
        # ylim=(-0.0165, 0.0115),
    )

    ax.errorbar(
        stats[xfield],
        stats['uoff'],
        stats['uoff_err'],
        label=r'$\Delta u$',
    )
    ax.errorbar(
        stats[xfield],
        stats['voff'],
        stats['voff_err'],
        label=r'$\Delta v$',
    )
    ax.errorbar(
        stats[xfield],
        stats['altoff'],
        stats['altoff_err'],
        label=r'$\Delta$ alt',
    )
    ax.errorbar(
        stats[xfield],
        stats['azoff'],
        stats['azoff_err'],
        label=r'$\Delta$ az',
    )

    ax.axhline(0, color='black')
    ax.legend()

    fname = f'offsets-vs-{xfield}.pdf'
    print('writing:', fname)
    mplt.savefig(fname)
    mplt.savefig(fname.replace('.pdf', '.png'), dpi=150)


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--flist', help='piff files', required=True)
    parser.add_argument('--bypointing', action='store_true')
    return parser.parse_args()


def main():
    args = get_args()
    with open(args.flist) as fobj:
        flist = [line.strip() for line in fobj]

    ploteach = False

    if args.bypointing:
        st = load_data_bypointing(flist=flist, ploteach=ploteach)

        plot_trend_bypointing(st, xfield='alt')
        plot_trend_bypointing(st, xfield='dec')
        plot_trend_bypointing(st, xfield='airmass')
    else:
        st = load_data(flist)
        plot_trend(st, xfield='s2n')


if __name__ == '__main__':
    main()
