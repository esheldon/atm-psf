#!/usr/bin/env python

def get_args():
    import argparse
    parser = argparse.ArgumentParser()

    parser.add_argument('--instcat', required=True)
    parser.add_argument('--seed', type=int, required=True)
    parser.add_argument('--sim-config', help='optional sim config')
    parser.add_argument('--nccds', type=int,
                        help='simulate this many random ccds, up to 189')
    parser.add_argument('--ccds', type=int, nargs='+',
                        help='simulate these ccds, e.g. "35 66"')
    parser.add_argument('--outdir', required=True)

    parser.add_argument(
        '--use-existing',
        action='store_true',
        help='do not overwrite existing data',
    )

    return parser.parse_args()


def go(args):
    import numpy as np
    import atm_psf

    if args.nccds is None and args.ccds is None:
        raise RuntimeError('send either ccds or nccds')

    atm_psf.io.makedir(args.outdir)

    rng = np.random.default_rng(args.seed)

    if args.ccds is not None:
        ccds = args.ccds
    else:
        ccds = rng.choice(189, size=args.nccds, replace=False)
        ccds.sort()

    sim_config = atm_psf.config.load_sim_config(args.sim_config)

    atm_psf.util.run_sim_by_type(
        rng=rng,
        config=sim_config,
        instcat=args.instcat,
        ccds=ccds,
        outdir=args.outdir,
        use_existing=args.use_existing,
    )


def main():
    args = get_args()
    go(args)


main()
