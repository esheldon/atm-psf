#!/usr/bin/env python

SCRIPT = r"""#!/usr/bin/bash
# make sure to source ~/imsim-setup/imsim-setup.sh first
obsid=$1
cat_seed=$2
sim_seed=$3

set -e
export OMP_NUM_THREADS=1

outdir=$(printf '%%08d' $obsid)
mkdir -v -p $outdir
instcat="$outdir/instcat.txt"

if [ -n "${_CONDOR_SCRATCH_DIR}" ]; then
    logdir=${_CONDOR_SCRATCH_DIR}
else
    logdir=${outdir}
fi

logfile="${logdir}/${outdir}.log"
errfile="${logdir}/${outdir}.err"

echo "using logdir: ${logdir}" > ${logfile}

echo "running atm-psf-make-cat" >> ${logfile}

/usr/bin/time -v atm-psf-make-cat \
    %(cat_extra)s \
    --seed ${cat_seed} \
    --opsim-db %(opsim_db)s \
    --obsid ${obsid} \
    --objfile %(objfile)s \
    --instcat ${instcat} >> ${logfile} 2>> ${errfile}

#    --nocorners \
echo "running atm-psf-run-sim" >> ${logfile}
/usr/bin/time -v %(command)s \
    %(sim_extra)s \
    --seed ${sim_seed} \
    --instcat ${instcat} \
    --outdir ${outdir} >> ${logfile} 2>> ${errfile}

if [ -n "${_CONDOR_SCRATCH_DIR}" ]; then
    echo "moving ${logfile} to directory ${outdir}" >> ${logfile}
    echo "moving ${errfile} to directory ${outdir}" >> ${logfile}
    mv -v ${logfile} ${outdir}/
    mv -v ${errfile} ${outdir}/
fi
"""


# this version is for local testing
TEST_SCRIPT = r"""#!/usr/bin/bash
# make sure to source ~/imsim-setup/imsim-setup.sh first
obsid=$1
cat_seed=$2
sim_seed=$3

set -e
export OMP_NUM_THREADS=1

outdir=$(printf '%%08d' $obsid)
mkdir -v -p $outdir
instcat="$outdir/instcat.txt"

echo "running atm-psf-make-cat"

atm-psf-make-cat \
    %(cat_extra)s \
    --seed ${cat_seed} \
    --opsim-db %(opsim_db)s \
    --obsid ${obsid} \
    --objfile %(objfile)s \
    --instcat ${instcat}

#    --nocorners \
echo "running atm-psf-run-sim"
%(command)s \
    %(sim_extra)s \
    --seed ${sim_seed} \
    --instcat ${instcat} \
    --outdir ${outdir}
"""


CONDOR_HEAD = r"""
universe = vanilla

notification = Never

# Run this exe with these args
executable = run.sh

request_memory = %(memory)s

getenv = True

kill_sig = SIGINT

+Experiment = "astro"

"""

JOB_TEMPLATE = r"""
+job_name = "%(job_name)s"
arguments = %(obsid)d %(cat_seed)s %(sim_seed)d
Queue
"""


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--run-config', required=True)
    parser.add_argument('--run-piff', action='store_true')
    parser.add_argument('--run-nnpsf', action='store_true')
    parser.add_argument('--nocleanup', action='store_true')
    parser.add_argument(
        '--use-existing', action='store_true',
        help=(
            'whether to use existing sim files. '
            'for do_ffov will also check for existing output file'
        )
    )
    return parser.parse_args()


def write_script(args, run_config, dotest=False):
    import os

    cat_extra = []
    sim_extra = []

    if args.use_existing:
        sim_extra.append('--use-existing')

    if 'sim_config' in run_config:
        # we copied the config into the dir
        sim_config_base = os.path.basename(run_config['sim_config'])
        cat_extra.append(f'--sim-config {sim_config_base}')
        sim_extra.append(f'--sim-config {sim_config_base}')

    if args.run_piff:
        command = 'atm-psf-run-sim-and-piff'
        sim_extra.append(f'--run-config {args.run_config}')
    elif args.run_nnpsf:
        command = 'atm-psf-run-sim-and-nnpsf'
        sim_extra.append(f'--run-config {args.run_config}')
    else:
        command = 'atm-psf-run-sim'

    if args.nocleanup:
        sim_extra.append('--nocleanup')

    cat_extra = ' '.join(cat_extra)
    sim_extra = ' '.join(sim_extra)

    if dotest:
        template = TEST_SCRIPT
        outfile = 'test.sh'
    else:
        template = SCRIPT
        outfile = 'run.sh'

    script = template % {
        'command': command,
        'cat_extra': cat_extra,
        'sim_extra': sim_extra,
        'opsim_db': run_config['opsim_db'],
        'objfile': run_config['object_file'],
    }

    print('writing:', outfile)
    with open(outfile, 'w') as fobj:
        fobj.write(script)

    os.system(f'chmod 755 {outfile}')


def copy_file(path, run_dir):
    import os
    import shutil

    abspath = os.path.abspath(path)
    outpath = os.path.abspath(
        os.path.join(run_dir, os.path.basename(path))
    )

    if abspath == outpath:
        return

    print(f'copying {path} -> {run_dir}')
    shutil.copy(path, run_dir)

    return os.path.basename(path)


def write_condor_head(condorf, config):
    head = CONDOR_HEAD % {
        'memory': config['memory'],
    }
    condorf.write(head)


OBSID_QUERY = r"""
select
    observationId
from
    observations
where
    target =''
    and filter='%(filter)s'
    and airmass between %(airmass_low)g and %(airmass_high)g
    %(extra)s
"""


def get_radec_cut(config):
    ra_range = config['ra_range']
    dec_range = config['dec_range']
    ra_cut = '    and fieldRA between %(ra_low)g and %(ra_high)g' % {
        'ra_low': ra_range[0],
        'ra_high': ra_range[1],
    }
    dec_cut = '    and fieldDec between %(dec_low)g and %(dec_high)g' % {
        'dec_low': dec_range[0],
        'dec_high': dec_range[1],
    }
    return [ra_cut, dec_cut]


def get_obsids(config, rng):
    import sqlite3
    import numpy as np

    extra = []

    if 'ra_range' in config:
        extra += get_radec_cut(config)

    extra = '\n'.join(extra)

    airmass_range = config.get('airmass_range', [1, 3])
    query = OBSID_QUERY % {
        'filter': config['filter'],
        'airmass_low': airmass_range[0],
        'airmass_high': airmass_range[1],
        'extra': extra,
    }

    with sqlite3.connect(config['opsim_db']) as conn:
        print('getting random obsid')
        print(query)
        curs = conn.cursor()
        res = curs.execute(query).fetchall()

    obsids = np.array([r[0] for r in res])
    if 'npointings' in config:
        obsids = rng.choice(obsids, size=config['npointings'], replace=False)

    return obsids


def main():
    import os
    import numpy as np
    import atm_psf
    from esutil.pbar import pbar

    args = get_args()

    run_config = atm_psf.io.load_yaml(args.run_config)
    rng = np.random.default_rng(run_config['seed'])

    run = atm_psf.util.config_file_to_run(args.run_config)

    obsids = get_obsids(config=run_config, rng=rng)

    copy_file(args.run_config, run_dir='.')

    if 'sim_config' in run_config:
        copy_file(run_config['sim_config'], run_dir='.')

    write_script(args=args, run_config=run_config)
    write_script(args=args, run_config=run_config, dotest=True)

    condor_file = os.path.join('submit.condor')
    print('opening:', condor_file)
    nkept = 0
    with open(condor_file, 'w') as condorf:

        write_condor_head(condorf, run_config)

        for obsid in pbar(obsids):
            if args.use_existing:
                if args.run_nnpsf:
                    do_ffov = run_config.get('nnpsf', {}).get('do_ffov', False)
                    if do_ffov:
                        outdir = f'{obsid:08d}'
                        outfile = atm_psf.io.get_nnpsf_ffov_output_fname(
                            obsid=obsid,
                            band=run_config['filter'],
                            dirname=outdir,
                        )
                        if os.path.exists(outfile):
                            continue

            cat_seed = rng.integers(0, 2**30)
            sim_seed = rng.integers(0, 2**30)
            job_name = f'{run}-{obsid:08d}'

            jobtext = JOB_TEMPLATE % {
                'job_name': job_name,
                'obsid': obsid,
                'cat_seed': cat_seed,
                'sim_seed': sim_seed,
            }
            condorf.write(jobtext)
            nkept += 1

    print('skipped:', len(obsids) - nkept)
    print('kept:', nkept)


if __name__ == '__main__':
    main()
