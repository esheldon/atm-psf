#!/usr/bin/env python

SCRIPT = r"""#!/usr/bin/bash
# make sure to source ~/imsim-setup/imsim-setup.sh first
obsid=$1
instcat=$2
seed=$3

%(command)s \
    %(extra)s \
    --run-config %(run_config)s \
    --opsim-db %(opsim_db)s \
    --obsid ${obsid} \
    --instcat ${instcat} \
    --nccds %(nccds)d \
    --seed ${seed}
"""


CONDOR_HEAD = r"""
universe = vanilla

notification = Never

# Run this exe with these args
executable = run.sh

request_memory = %(memory)s

getenv = True

kill_sig = SIGINT

+Experiment = "astro"

"""

JOB_TEMPLATE = r"""
+job_name = "%(job_name)s"
arguments = %(obsid)d %(instcat)s %(seed)d
Queue
"""


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('run_config')
    parser.add_argument(
        '--run-piff',
        action='store_true',
        help='if set, also run piff and maybe clean up sim files',
    )
    parser.add_argument(
        '--nocleanup',
        action='store_true',
        help='whether to clean up sim files when running piff',
    )
    return parser.parse_args()


def write_script(args, config, run_dir):
    import os

    extra = ''
    if args.run_piff:
        command = 'atm-psf-run-sim-and-piff'
        if args.nocleanup:
            extra = '--nocleanup'
    else:
        command = 'atm-psf-run-sim'

    if 'sim_config' in config:
        # we copied the config into the dir
        sim_config_base = os.path.basename(config['sim_config'])
        extra += f' --sim-config {sim_config_base}'

    outfile = f'{run_dir}/run.sh'
    print('writing:', outfile)

    script = SCRIPT % {
        'command': command,
        'extra': extra,
        # we copied the config into the dir
        'run_config': os.path.basename(args.run_config),
        'opsim_db': config['opsim_db'],
        'nccds': config['ccds_per_pointing'],
    }

    with open(outfile, 'w') as fobj:
        fobj.write(script)

    os.system(f'chmod 755 {outfile}')


def copy_file(path, run_dir):
    import os
    import shutil

    print(f'copying {path} -> {run_dir}')
    shutil.copy(path, run_dir)

    return os.path.basename(path)


def write_condor_head(condorf, config):
    head = CONDOR_HEAD % {
        'memory': config['memory'],
    }
    condorf.write(head)


OBSID_QUERY = r"""
select
    observationId
from
    observations
where
    target =''
    and filter='%(filter)s'
    and airmass between %(airmass_low)g and %(airmass_high)g
"""


def get_random_obsids(config, rng):
    import sqlite3
    import numpy as np

    airmass_range = config.get('airmass_range', [1, 3])
    with sqlite3.connect(config['opsim_db']) as conn:
        print('getting random obsid')
        curs = conn.cursor()
        query = OBSID_QUERY % {
            'filter': config['filter'],
            'airmass_low': airmass_range[0],
            'airmass_high': airmass_range[1],
        }
        print(query)
        res = curs.execute(query).fetchall()

    all_obsids = np.array([r[0] for r in res])
    obsids = rng.choice(all_obsids, size=config['npointings'], replace=False)

    return obsids


def main():
    import os
    import numpy as np
    import atm_psf
    from tqdm import tqdm

    args = get_args()

    run_config = atm_psf.io.load_yaml(args.run_config)
    rng = np.random.default_rng(run_config['seed'])

    run_dir = os.path.join(run_config['base_dir'], run_config['run'])
    atm_psf.util.makedir(run_dir)

    instcats = atm_psf.io.load_instcat_paths(run_config['instcats'])
    obsids = get_random_obsids(config=run_config, rng=rng)

    copy_file(args.run_config, run_dir)

    if 'sim_config' in run_config:
        copy_file(run_config['sim_config'], run_dir)

    write_script(args=args, config=run_config, run_dir=run_dir)

    condor_file = os.path.join(run_dir, 'submit.condor')
    print('opening:', condor_file)
    with open(condor_file, 'w') as condorf:

        write_condor_head(condorf, run_config)

        for obsid in tqdm(obsids):
            this_seed = rng.integers(0, 2**30)
            job_name = f'{run_config["run"]}-{obsid:08d}'

            instcat = rng.choice(instcats)

            jobtext = JOB_TEMPLATE % {
                'job_name': job_name,
                'obsid': obsid,
                'instcat': instcat,
                'seed': this_seed,
            }
            condorf.write(jobtext)


if __name__ == '__main__':
    main()
