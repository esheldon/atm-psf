#!/usr/bin/env python
# TODO clean up

import fitsio
import galsim
from galsim import degrees
import numpy as np
import matplotlib.pyplot as mplt
import esutil as eu
from esutil.stat import print_stats
from esutil.numpy_util import between
# from glob import glob
from atm_psf.wcs import (
    fit_gs_wcs,
    # get_wcs_non_outliers,
    # gs_wcs_to_dm_wcs,
)
# from lsst.meas.extensions.piff.piffPsfDeterminer import CelestialWcsWrapper

SCALE = 0.2


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--image', required=True)
    parser.add_argument('--truth', required=True)
    parser.add_argument('--output-image',
                        help='write a new image with updated wcs')

    args = parser.parse_args()

    assert args.image != args.output_image
    assert args.truth != args.output_image
    return args


def get_dm_xy(wcs, ra, dec):
    import lsst.geom
    x = np.zeros(ra.size)
    y = np.zeros(ra.size)

    for i in range(ra.size):
        skypos = lsst.geom.SpherePoint(ra[i], dec[i], lsst.geom.degrees)
        impos = wcs.skyToPixel(skypos)
        x[i] = impos.x
        y[i] = impos.y

    return x, y


def read_data(args):
    print('reading:', args.image)
    gsim = galsim.fits.read(args.image)
    print('reading:', args.truth)
    t = fitsio.read(args.truth)

    w, = np.where(
        np.isfinite(t['x']) & np.isfinite(t['y'])
    )

    t = t[w]
    return gsim, t


def plot_quiver(x, y, dx_arcsec, dy_arcsec, fname):
    fig, ax = mplt.subplots(figsize=(6, 5))
    ax.set(
        xlim=[-200, 4500],
        ylim=[-200, 4500],
    )
    M = np.sqrt(dx_arcsec**2 + dy_arcsec**2)

    cmap = 'inferno'
    qplt = ax.quiver(
        x, y, dx_arcsec, dy_arcsec,
        M,
        angles='xy',
        scale_units='xy',
        scale=0.0005,
        # scale=0.005,
        cmap=cmap,
    )
    fig.colorbar(qplt, cmap=cmap)
    print('saving:', fname)
    mplt.savefig(fname)
    if '.pdf' in fname:
        png = fname.replace('.pdf', '.png')
        print('saving:', png)
        mplt.savefig(png, dpi=150)


def main():
    args = get_args()

    rng = np.random.default_rng()

    gsim, t = read_data(args)
    w, = np.where(
        np.isfinite(t['x'])
        & (t['phot_flux'] > 100)
        & between(t['x'], 1, 4096)
        & between(t['y'], 1, 4096)
    )
    t = t[w]

    x = t['x']
    y = t['y']
    ra = t['ra']
    dec = t['dec']
    # x = t['xbat']
    # y = t['ybat']

    r = rng.uniform(size=t.size)
    s = r.argsort()

    # training and validation
    validation_frac = 0.5
    nvalidation = int(s.size * validation_frac)

    # verification
    vi = s[:nvalidation]
    # training
    ti = s[nvalidation:]

    order = 2
    nsig = 4
    wcs = fit_gs_wcs(orig_gs_wcs=gsim.wcs, truth=t[ti], nsig=nsig, order=order)
    # wcs = gsim.wcs
    # dmwcs = gs_wcs_to_dm_wcs(wcs, gsim.bounds)

    # wgood, _, _ = get_wcs_non_outliers(wcs=wcs, data=t[vi], nsig=nsig)
    #
    # vi = vi[wgood]

    # dmx, dmy = get_dm_xy(dmwcs, ra[vi], dec[vi])
    # dmx += 1
    # dmy += 1

    pra, pdec = wcs.xyToradec(
        x=x[vi],
        y=y[vi],
        units=degrees,
    )
    px, py = wcs.radecToxy(
        ra=ra[vi],
        dec=dec[vi],
        units=degrees,
    )
    dx = (px - x[vi])
    dy = (py - y[vi])
    ddec = (pdec - t['dec'][vi]) * 3600 * 1000

    dxs = dx * SCALE * 1000
    dys = dy * SCALE * 1000
    ds = np.sqrt(dxs**2 + dys**2)
    sphdist = eu.coords.sphdist(
        t['ra'][vi], t['dec'][vi],
        pra, pdec,
    ) * 3600 * 1000

    # dmdx = (dmx - x[vi])
    # dmdy = (dmy - y[vi])
    # import IPython; IPython.embed()

    if True:
        plot_quiver(x[vi], y[vi], dxs, dys, fname='quiver.pdf')

    print('dx stats in mas')
    xstats = print_stats(dxs)
    print('dy stats in mas')
    ystats = print_stats(dys)
    print('ddec stats in mas')
    decstats = print_stats(ddec)

    xtext = f'RMS: {xstats["std"]:.2g} mas'
    ytext = f'RMS: {ystats["std"]:.2g} mas'
    dectext = f'RMS: {decstats["std"]:.2g} mas'

    fig, axs = mplt.subplots(ncols=2, nrows=2, figsize=(6, 6))
    axs[0, 0].set(
        xlabel=r'$\Delta$ x [mas]',
    )
    axs[0, 1].set(
        xlabel=r'$\Delta$ DEC [mas]',
    )
    axs[1, 0].set(
        xlabel=r'log$_{10}$ $|$pix offset$|$ [mas]',
    )
    axs[1, 1].set(
        xlabel=r'log$_{10}$ $|$sph offset$|$ [mas]',
    )
    # axs[1, 1].axis('off')

    # binsize = 0.005
    maxval = max(dxs.max(), dys.max())
    minval = min(dxs.min(), dys.min())
    # nbin = int((maxval - minval) / binsize)

    nbin = 35
    bins = np.linspace(minval, maxval, nbin)
    print(minval, maxval)

    alpha = 0.5
    axs[0, 0].hist(
        dxs,
        bins=bins,
        alpha=alpha,
        label=f'x {xtext}',
    )
    axs[0, 0].hist(
        dys,
        bins=bins,
        alpha=alpha,
        label=f'y {ytext}',
    )
    axs[0, 0].legend()

    axs[0, 1].hist(
        ddec,
        bins=bins,
        alpha=alpha,
        label=f'DEC {dectext}',
    )

    axs[0, 1].legend()

    logds = np.log10(ds)

    maxval = logds.max() * 1.1
    bins = np.linspace(np.log10(1), maxval, nbin)

    axs[1, 0].hist(
        logds,
        bins=bins,
        alpha=alpha,
    )

    logsph = np.log10(sphdist)
    maxval = logsph.max() * 1.1
    bins = np.linspace(np.log10(1), maxval, nbin)

    axs[1, 1].hist(
        logsph,
        bins=bins,
        alpha=alpha,
    )

    fname = 'diffs.pdf'
    png_fname = 'diffs.png'
    print('writing:', fname)
    fig.savefig(fname)
    print('writing:', png_fname)
    fig.savefig(png_fname, dpi=150)

    if args.output_image is not None:
        new_header = {}

        sky = t['sky_level'][0] * 0.2**2
        gsim.array[:, :] -= sky
        weight = gsim.array[:, :] * 0 + 1/sky

        wcs.writeToFitsHeader(new_header, gsim.bounds)
        del new_header['GS_XMIN']
        del new_header['GS_YMIN']
        del new_header['GS_WCS']
        print('writing:', args.output_image)
        with fitsio.FITS(args.output_image, 'rw', clobber=True) as fits:
            fits.write(gsim.array, header=new_header, extname='image')
            fits.write(weight, extname='weight')


main()
