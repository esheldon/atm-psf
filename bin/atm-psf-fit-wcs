#!/usr/bin/env python
# TODO clean up

import fitsio
import galsim
from galsim import degrees
import numpy as np
import proplot as pplt
import matplotlib.pyplot as mplt
# import esutil as eu
from esutil.stat import print_stats
# from glob import glob

SCALE = 0.2


def read_data():
    ccd = 'R02_S11-det013'
    # ccd = 'R13_S11-det058'
    # ccd = 'R14_S20-det069'
    # ccd = 'R23_S10-det102'
    # extra = '-fixsed'
    extra = ''
    t = fitsio.read(f'truth-00023308-0-g-{ccd}{extra}.fits')
    gsim = galsim.fits.read(f'eimage-00023308-0-g-{ccd}{extra}.fits')

    w, = np.where(
        np.isfinite(t['x']) & np.isfinite(t['y'])
    )

    t = t[w]
    return gsim, t


def plot_quiver(x, y, dx_arcsec, dy_arcsec):
    fig, ax = mplt.subplots()
    ax.set(
        xlim=[-200, 4500],
        ylim=[-200, 4500],
    )
    M = np.sqrt(dx_arcsec**2 + dy_arcsec**2)

    cmap = pplt.Colormap('inferno')
    qplt = ax.quiver(
        x, y, dx_arcsec, dy_arcsec,
        M,
        angles='xy',
        scale_units='xy',
        scale=0.0005,
        # scale=0.005,
        cmap=cmap,
    )
    fig.colorbar(qplt, cmap=cmap)
    mplt.show()


rng = np.random.default_rng(1234)

gsim, t = read_data()
x = t['x']
y = t['y']
ra = t['ra']
dec = t['dec']
# x = t['xbat']
# y = t['ybat']

r = rng.uniform(size=t.size)
s = r.argsort()

frac = 0.5

nvalidation = int(s.size * frac)

# verification
vi = s[:nvalidation]
# training
ti = s[nvalidation:]


if False:
    fig, ax = pplt.subplots()
    ax.scatter(t['ra'], t['dec'])
    ax.scatter(
        gsim.wcs.center.ra / degrees, gsim.wcs.center.dec / degrees
    )
    pplt.show()
    pplt.close()

if True:
    wcs = galsim.FittedSIPWCS(
        x[ti],
        y[ti],
        np.radians(t['ra'][ti]),
        np.radians(t['dec'][ti]),
        center=gsim.wcs.center,
        order=3,
    )
else:
    wcs = gsim.wcs

pra, pdec = wcs.xyToradec(
    x=x[vi],
    y=y[vi],
    units=galsim.degrees,
)
px, py = wcs.radecToxy(
    ra=ra[vi],
    dec=dec[vi],
    units=galsim.degrees,
)
dx = (px - x[vi])
dy = (py - y[vi])
ddec = (pdec - t['dec'][vi]) * 3600

if True:
    plot_quiver(x[vi], y[vi], dx * SCALE, dy * SCALE)

print('dx stats in arcsec')
print_stats(dx * SCALE, nsig=4.5)
print('dy stats in arcsec')
print_stats(dy * SCALE, nsig=4.5)
print('ddec stats in arcsec')
print_stats(ddec, nsig=4.5)


fig, axs = pplt.subplots(ncols=2)
axs[0].set(
    xlabel=r'$\Delta$ x [arcsec]',
)
axs[1].set(
    xlabel=r'$\Delta$ DEC [arcsec]',
)

nbin = 20
bins = np.linspace(-0.3, 0.3, nbin)

alpha = 0.5
axs[0].hist(
    dx * SCALE,
    bins=bins,
    alpha=alpha,
    label='x',
)
axs[0].hist(
    dy * SCALE,
    bins=bins,
    alpha=alpha,
    label='y',
)
axs[0].legend()

axs[1].hist(
    ddec,
    bins=bins,
    alpha=alpha,
    label='DEC',
)
axs[1].legend()

fname = 'diffs.pdf'
print('writing:', fname)
fig.savefig(fname)
# pplt.show()
