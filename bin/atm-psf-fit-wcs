#!/usr/bin/env python
# TODO clean up

import fitsio
import galsim
from galsim import degrees
import numpy as np
import proplot as pplt
import matplotlib.pyplot as mplt
# import esutil as eu
from esutil.stat import print_stats
# from glob import glob
from atm_psf.wcs import fit_gs_wcs, get_wcs_non_outliers

SCALE = 0.2


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--image', required=True)
    parser.add_argument('--truth', required=True)
    return parser.parse_args()


def read_data(args):
    print('reading:', args.image)
    gsim = galsim.fits.read(args.image)
    print('reading:', args.truth)
    t = fitsio.read(args.truth)

    w, = np.where(
        np.isfinite(t['x']) & np.isfinite(t['y'])
    )

    t = t[w]
    return gsim, t


def plot_quiver(x, y, dx_arcsec, dy_arcsec, fname):
    fig, ax = mplt.subplots(figsize=(6, 5))
    ax.set(
        xlim=[-200, 4500],
        ylim=[-200, 4500],
    )
    M = np.sqrt(dx_arcsec**2 + dy_arcsec**2)

    cmap = pplt.Colormap('inferno')
    qplt = ax.quiver(
        x, y, dx_arcsec, dy_arcsec,
        M,
        angles='xy',
        scale_units='xy',
        scale=0.0005,
        # scale=0.005,
        cmap=cmap,
    )
    fig.colorbar(qplt, cmap=cmap)
    print('saving:', fname)
    mplt.savefig(fname)


def main():
    args = get_args()

    rng = np.random.default_rng(1234)

    gsim, t = read_data(args)
    x = t['x']
    y = t['y']
    ra = t['ra']
    dec = t['dec']
    # x = t['xbat']
    # y = t['ybat']

    r = rng.uniform(size=t.size)
    s = r.argsort()

    frac = 0.5

    nvalidation = int(s.size * frac)

    # verification
    vi = s[:nvalidation]
    # training
    ti = s[nvalidation:]

    nsig = 3
    wcs = fit_gs_wcs(orig_gs_wcs=gsim.wcs, truth=t[ti], nsig=nsig)

    wgood, _, _ = get_wcs_non_outliers(wcs=wcs, data=t[vi], nsig=nsig)

    vi = vi[wgood]

    pra, pdec = wcs.xyToradec(
        x=x[vi],
        y=y[vi],
        units=degrees,
    )
    px, py = wcs.radecToxy(
        ra=ra[vi],
        dec=dec[vi],
        units=degrees,
    )
    dx = (px - x[vi])
    dy = (py - y[vi])
    ddec = (pdec - t['dec'][vi]) * 3600

    if True:
        plot_quiver(x[vi], y[vi], dx * SCALE, dy * SCALE, fname='quiver.pdf')

    print('dx stats in arcsec')
    print_stats(dx * SCALE, nsig=4.5)
    print('dy stats in arcsec')
    print_stats(dy * SCALE, nsig=4.5)
    print('ddec stats in arcsec')
    print_stats(ddec, nsig=4.5)

    fig, axs = pplt.subplots(ncols=2)
    axs[0].set(
        xlabel=r'$\Delta$ x [arcsec]',
    )
    axs[1].set(
        xlabel=r'$\Delta$ DEC [arcsec]',
    )

    nbin = 20
    bins = np.linspace(-0.3, 0.3, nbin)

    alpha = 0.5
    axs[0].hist(
        dx * SCALE,
        bins=bins,
        alpha=alpha,
        label='x',
    )
    axs[0].hist(
        dy * SCALE,
        bins=bins,
        alpha=alpha,
        label='y',
    )
    axs[0].legend()

    axs[1].hist(
        ddec,
        bins=bins,
        alpha=alpha,
        label='DEC',
    )
    axs[1].legend()

    fname = 'diffs.pdf'
    print('writing:', fname)
    fig.savefig(fname)
    # pplt.show()


main()
